{"version":3,"file":"static/js/875.e6b2aa1b.chunk.js","mappings":"oLAMA,MAkIaA,EAAiBA,KAC1B,MAAMC,GAAUC,EAAAA,EAAAA,MAGhB,GAFAC,QAAQC,IAAI,sCAAuCH,IAE9CA,EAED,OADAE,QAAQC,IAAI,2CACL,GAIX,GAAgB,WAAZH,EACA,MA5IG,CACH,CACII,GAAI,kBACJC,WAAY,UACZC,KAAM,aACNC,KAAM,aACNC,aAAc,CACVC,KAAM,kBACNC,YAAa,KACbC,YAAa,cAEjBC,MAAO,CACH,CAAEC,KAAM,MAAOJ,KAAM,uBAAwBK,KAAM,IAAKC,SAAU,GAClE,CAAEF,KAAM,MAAOJ,KAAM,WAAYK,KAAM,GAAIC,SAAU,GACrD,CAAEF,KAAM,MAAOJ,KAAM,aAAcK,KAAM,GAAIC,SAAU,IAE3DC,SAAU,IACVC,IAAK,EACLC,MAAO,IACPC,YAAa,CAAEC,KAAM,IAAKC,KAAM,GAChCC,UAAW,eACXC,QAAS,2BACTC,QAAS,eAEb,CACIpB,GAAI,kBACJC,WAAY,UACZC,KAAM,aACNC,KAAM,aACNC,aAAc,CACVC,KAAM,kBACNC,YAAa,KACbC,YAAa,cAEjBC,MAAO,CACH,CAAEC,KAAM,MAAOJ,KAAM,aAAcK,KAAM,IAAKC,SAAU,GACxD,CAAEF,KAAM,MAAOJ,KAAM,YAAaK,KAAM,IAAKC,SAAU,GACvD,CAAEF,KAAM,MAAOJ,KAAM,aAAcK,KAAM,GAAIC,SAAU,IAE3DC,SAAU,IACVC,IAAK,EACLC,MAAO,IACPC,YAAa,CAAEC,KAAM,IAAKC,KAAM,GAChCC,UAAW,eACXC,QAAS,2BACTC,QAAS,eAEb,CACIpB,GAAI,kBACJC,WAAY,UACZC,KAAM,aACNC,KAAM,aACNC,aAAc,CACVC,KAAM,kBACNC,YAAa,KACbC,YAAa,cAEjBC,MAAO,CACH,CAAEC,KAAM,MAAOJ,KAAM,cAAeK,KAAM,GAAIC,SAAU,GACxD,CAAEF,KAAM,MAAOJ,KAAM,OAAQK,KAAM,GAAIC,SAAU,GACjD,CAAEF,KAAM,MAAOJ,KAAM,YAAaK,KAAM,IAAKC,SAAU,IAE3DC,SAAU,IACVC,IAAK,EACLC,MAAO,IACPC,YAAa,CAAEC,KAAM,IAAKC,KAAM,GAChCC,UAAW,eACXC,QAAS,2BACTC,QAAS,gBA2EjB,MAAMC,EAAU,gBAAAC,OAAmB1B,GAC7B2B,EAAQC,aAAaC,QAAQJ,GACnCvB,QAAQC,IAAI,wCAAyCsB,GACrDvB,QAAQC,IAAI,8BAA+BwB,GAE3C,MAAMG,EAAcH,EAAQI,KAAKC,MAAML,GAAS,GAIhD,OAHAzB,QAAQC,IAAI,gBAAiB2B,GAC7B5B,QAAQC,IAAI,yBAA0B2B,EAAYG,QAE3CH,GA2JEI,EAA0BA,KACnC,MAAMC,EAAQ,IAAIC,KAGlB,GAF8C,IAApBD,EAAME,UAET,CAEnB,MAAMC,EAAY,IAAIF,KAAKD,EAAMI,cAAeJ,EAAMK,WAAa,EAAG,GAChEC,EAAYH,EAAUI,cAAcC,MAAM,KAAK,GAC/CC,EAAU,IAAIR,KAAKD,EAAMI,cAAeJ,EAAMK,WAAY,GAAGE,cAAcC,MAAM,KAAK,GAItFE,EADW9C,IACa+C,OAAOC,IACjC,MAAMC,EAAW,IAAIZ,KAAKW,EAAKzC,KAAKqC,MAAM,KAAKM,UAAUC,KAAK,MAC9D,OAAOF,GAAY,IAAIZ,KAAKK,IAAcO,GAAY,IAAIZ,KAAKQ,KAGnE,GAAIC,EAAaZ,OAAS,EAAG,CACzB,MAAMkB,EAAMC,EAAmBP,EAAcP,GACvCe,EAAYf,EAAUgB,eAAe,UAAW,CAAEC,MAAO,OAAQC,KAAM,YACvEC,EAAQ,kBAAA/B,OAAqB2B,EAAUK,QAAQ,IAAK,KAAI,QAI9D,OAHAP,EAAIQ,KAAKF,GAETvD,QAAQC,IAAI,iCAADuB,OAAkC+B,KACtC,CACX,CACJ,CACA,OAAO,GAILL,EAAqBA,CAACzB,EAAO4B,KAC/B,MAAMK,GAAOC,EAAAA,EAAAA,MACPV,EAAM,IAAIW,EAAAA,GAGhBX,EAAIY,YAAY,IAChBZ,EAAIa,aAAQC,EAAW,QACvB,MAAMC,EAAuC,qFAAhB,OAAJN,QAAI,IAAJA,OAAI,EAAJA,EAAMtC,WAAiC,kBACrB,qFAAhB,OAAJsC,QAAI,IAAJA,OAAI,EAAJA,EAAMtC,WAAiC,mBAClC,OAAJsC,QAAI,IAAJA,OAAI,EAAJA,EAAMtC,YAAa,QAErC6C,EAAYZ,EAAMD,eAAe,UAAW,CAAEC,MAAO,OAAQC,KAAM,YAQzE,OAPAL,EAAIiB,KAAK,GAAD1C,OAAIwC,EAAgB,qBAAqB,GAAI,IACrDf,EAAIY,YAAY,IAChBZ,EAAIiB,KAAK,UAAD1C,OAAWyC,GAAa,GAAI,IACpChB,EAAIiB,KAAK,cAAD1C,QAAe,IAAIU,MAAOiC,sBAAwB,GAAI,IAC9DlB,EAAIiB,KAAK,gBAAD1C,OAAiBC,EAAMM,QAAU,GAAI,IAGtCqC,EAAkBnB,EAAKxB,EAAO,KAmEnC2C,EAAoBA,CAACnB,EAAKxB,EAAO4C,KACnC,IAAIC,EAAOD,EAGXpB,EAAIa,aAAQC,EAAW,QACvBd,EAAIY,YAAY,GAChBZ,EAAIiB,KAAK,MAAO,GAAII,GACpBrB,EAAIiB,KAAK,WAAY,GAAII,GACzBrB,EAAIiB,KAAK,OAAQ,GAAII,GACrBrB,EAAIiB,KAAK,WAAY,GAAII,GACzBrB,EAAIiB,KAAK,OAAQ,IAAKI,GACtBrB,EAAIiB,KAAK,QAAS,IAAKI,GACvBrB,EAAIiB,KAAK,WAAY,IAAKI,GAC1BrB,EAAIiB,KAAK,UAAW,IAAKI,GACzBA,GAAQ,EAGRrB,EAAIsB,KAAK,GAAID,EAAM,IAAKA,GACxBA,GAAQ,EAGRrB,EAAIa,aAAQC,EAAW,UACvBd,EAAIY,YAAY,GAEhBpC,EAAM+C,QAAQ,CAAC3B,EAAM4B,KAAW,IAADC,EAAAC,EAAAC,EAAAC,EAEvBP,EAAO,MACPrB,EAAI6B,UACJR,EAAO,GAGPrB,EAAIa,aAAQC,EAAW,QACvBd,EAAIY,YAAY,GAChBZ,EAAIiB,KAAK,MAAO,GAAII,GACpBrB,EAAIiB,KAAK,WAAY,GAAII,GACzBrB,EAAIiB,KAAK,OAAQ,GAAII,GACrBrB,EAAIiB,KAAK,WAAY,GAAII,GACzBrB,EAAIiB,KAAK,OAAQ,IAAKI,GACtBrB,EAAIiB,KAAK,QAAS,IAAKI,GACvBrB,EAAIiB,KAAK,WAAY,IAAKI,GAC1BrB,EAAIiB,KAAK,UAAW,IAAKI,GACzBA,GAAQ,EACRrB,EAAIsB,KAAK,GAAID,EAAM,IAAKA,GACxBA,GAAQ,EACRrB,EAAIa,aAAQC,EAAW,UACvBd,EAAIY,YAAY,IAGpB,MAAMkB,IAAiC,QAAjBL,EAAA7B,EAAKvC,oBAAY,IAAAoE,OAAA,EAAjBA,EAAmBnE,OAAQ,WAAWyE,UAAU,EAAG,IACnEC,EAA8B,QAAjBN,EAAA9B,EAAKvC,oBAAY,IAAAqE,GAAjBA,EAAmBnE,aAAiD,MAAlCqC,EAAKvC,aAAaE,YAAuB,QAAU,SAClGU,GAAuB,QAAhB0D,EAAA/B,EAAK5B,mBAAW,IAAA2D,OAAA,EAAhBA,EAAkB1D,OAAQ,EACjCC,GAAuB,QAAhB0D,EAAAhC,EAAK5B,mBAAW,IAAA4D,OAAA,EAAhBA,EAAkB1D,OAAQ0B,EAAK7B,OAAS,EAErDiC,EAAIiB,MAAMO,EAAQ,GAAGS,WAAY,GAAIZ,GACrCrB,EAAIiB,KAAKrB,EAAK1C,WAAY,GAAImE,GAC9BrB,EAAIiB,KAAKrB,EAAKzC,KAAM,GAAIkE,GACxBrB,EAAIiB,KAAKa,EAAc,GAAIT,GAC3BrB,EAAIiB,KAAKe,EAAW,IAAKX,GACzBrB,EAAIiB,KAAK,GAAD1C,QAAKqB,EAAK7B,OAAS,GAAGmE,QAAQ,IAAM,IAAKb,GACjDrB,EAAIiB,KAAK,GAAD1C,OAAIN,EAAKiE,QAAQ,IAAM,IAAKb,GACpCrB,EAAIiB,KAAK,GAAD1C,OAAIL,EAAKgE,QAAQ,IAAM,IAAKb,GACpCA,GAAQ,IAIZA,GAAQ,EACRrB,EAAIsB,KAAK,IAAKD,EAAM,IAAKA,GACzBA,GAAQ,EAER,MAAMc,EAAc3D,EAAM4D,OAAO,CAACC,EAAKzC,IAASyC,GAAOzC,EAAK7B,OAAS,GAAI,GACnEuE,EAAY9D,EAAM4D,OAAO,CAACC,EAAKzC,KAAI,IAAA2C,EAAA,OAAKF,IAAuB,QAAhBE,EAAA3C,EAAK5B,mBAAW,IAAAuE,OAAA,EAAhBA,EAAkBtE,OAAQ,IAAI,GAC7EuE,EAAYhE,EAAM4D,OAAO,CAACC,EAAKzC,KAAI,IAAA6C,EAAA,OAAKJ,IAAuB,QAAhBI,EAAA7C,EAAK5B,mBAAW,IAAAyE,OAAA,EAAhBA,EAAkBvE,OAAQ0B,EAAK7B,OAAS,IAAI,GASjG,OAPAiC,EAAIa,aAAQC,EAAW,QACvBd,EAAIY,YAAY,GAChBZ,EAAIiB,KAAK,UAAW,IAAKI,GACzBrB,EAAIiB,KAAK,MAAD1C,OAAO4D,EAAYD,QAAQ,IAAM,IAAKb,GAC9CrB,EAAIiB,KAAK,MAAD1C,OAAO+D,EAAUJ,QAAQ,IAAM,IAAKb,GAC5CrB,EAAIiB,KAAK,MAAD1C,OAAOiE,EAAUN,QAAQ,IAAM,IAAKb,GAErCrB,E","sources":["services/billHistoryService.js"],"sourcesContent":["// Bill History Service for managing saved bills\r\nimport { getCurrentUser, getCurrentHotelId } from './authService';\r\nimport { jsPDF } from 'jspdf';\r\nimport 'jspdf-autotable';\r\n\r\n// Sample bill data for demo purposes\r\nconst getSampleBillData = () => {\r\n    return [\r\n        {\r\n            id: 'BILL_SAMPLE_001',\r\n            billNumber: 'B123456',\r\n            date: '10/10/2025',\r\n            time: '2:30:45 PM',\r\n            customerInfo: {\r\n                name: 'Demo Customer 1',\r\n                tableNumber: 'T5',\r\n                phoneNumber: '9876543210'\r\n            },\r\n            items: [\r\n                { code: '101', name: 'Sample Special Thali', rate: 250, quantity: 2 },\r\n                { code: '201', name: 'Vada Pav', rate: 30, quantity: 3 },\r\n                { code: '601', name: 'Masala Tea', rate: 25, quantity: 2 }\r\n            ],\r\n            subtotal: 590,\r\n            tax: 0,\r\n            total: 590,\r\n            paymentInfo: { jama: 600, baki: 0 },\r\n            hotelName: 'Sample Hotel',\r\n            savedAt: '2025-10-10T14:30:45.000Z',\r\n            savedBy: 'sample_user'\r\n        },\r\n        {\r\n            id: 'BILL_SAMPLE_002',\r\n            billNumber: 'B123457',\r\n            date: '11/10/2025',\r\n            time: '7:15:20 PM',\r\n            customerInfo: {\r\n                name: 'Demo Customer 2',\r\n                tableNumber: 'T3',\r\n                phoneNumber: '9123456789'\r\n            },\r\n            items: [\r\n                { code: '102', name: 'Mini Thali', rate: 150, quantity: 1 },\r\n                { code: '301', name: 'Veg Pulao', rate: 160, quantity: 1 },\r\n                { code: '602', name: 'Buttermilk', rate: 35, quantity: 2 }\r\n            ],\r\n            subtotal: 380,\r\n            tax: 0,\r\n            total: 380,\r\n            paymentInfo: { jama: 380, baki: 0 },\r\n            hotelName: 'Sample Hotel',\r\n            savedAt: '2025-10-11T19:15:20.000Z',\r\n            savedBy: 'sample_user'\r\n        },\r\n        {\r\n            id: 'BILL_SAMPLE_003',\r\n            billNumber: 'B123458',\r\n            date: '12/10/2025',\r\n            time: '1:45:10 PM',\r\n            customerInfo: {\r\n                name: 'Demo Customer 3',\r\n                tableNumber: 'T7',\r\n                phoneNumber: '9876512345'\r\n            },\r\n            items: [\r\n                { code: '202', name: 'Bhaji Plate', rate: 80, quantity: 2 },\r\n                { code: '401', name: 'Roti', rate: 18, quantity: 4 },\r\n                { code: '501', name: 'Dal Tadka', rate: 120, quantity: 1 }\r\n            ],\r\n            subtotal: 292,\r\n            tax: 0,\r\n            total: 292,\r\n            paymentInfo: { jama: 300, baki: 0 },\r\n            hotelName: 'Sample Hotel',\r\n            savedAt: '2025-10-12T13:45:10.000Z',\r\n            savedBy: 'sample_user'\r\n        }\r\n    ];\r\n};\r\n\r\n// Save bill to history\r\nexport const saveBillToHistory = (billData) => {\r\n    console.log('saveBillToHistory called with:', billData);\r\n    \r\n    const hotelId = getCurrentHotelId();\r\n    const user = getCurrentUser();\r\n    \r\n    console.log('Hotel ID:', hotelId);\r\n    console.log('User:', user);\r\n    \r\n    // Return fake success for sample hotel (read-only mode)\r\n    if (hotelId === 'sample') {\r\n        console.log('Sample hotel detected - returning fake success');\r\n        return 'BILL_SAMPLE_DEMO';\r\n    }\r\n    \r\n    if (!hotelId || !billData) {\r\n        console.log('Missing hotelId or billData:', { hotelId, billData });\r\n        return false;\r\n    }\r\n    \r\n    const billRecord = {\r\n        id: 'BILL_' + Date.now(),\r\n        billNumber: billData.billNumber,\r\n        date: billData.date,\r\n        time: billData.time,\r\n        customerInfo: billData.customerInfo,\r\n        items: billData.items,\r\n        subtotal: billData.subtotal,\r\n        tax: billData.tax,\r\n        total: billData.total,\r\n        paymentInfo: billData.paymentInfo || { jama: 0, baki: billData.total || 0 },\r\n        hotelName: user?.hotelName,\r\n        savedAt: new Date().toISOString(),\r\n        savedBy: user?.username\r\n    };\r\n    \r\n    console.log('Bill record created:', billRecord);\r\n    \r\n    // Get existing bills for this hotel\r\n    const existingBills = getBillHistory();\r\n    console.log('Existing bills:', existingBills);\r\n    \r\n    // Add new bill to the beginning of the array\r\n    const updatedBills = [billRecord, ...existingBills];\r\n    \r\n    // Save to localStorage\r\n    const storageKey = `bill_history_${hotelId}`;\r\n    localStorage.setItem(storageKey, JSON.stringify(updatedBills));\r\n    console.log('Saved to localStorage with key:', storageKey);\r\n    console.log('Updated bills count:', updatedBills.length);\r\n    \r\n    return billRecord.id;\r\n};\r\n\r\n// Get bill history for current hotel\r\nexport const getBillHistory = () => {\r\n    const hotelId = getCurrentHotelId();\r\n    console.log('getBillHistory called with hotelId:', hotelId);\r\n    \r\n    if (!hotelId) {\r\n        console.log('No hotelId found, returning empty array');\r\n        return [];\r\n    }\r\n    \r\n    // Return sample data for sample hotel\r\n    if (hotelId === 'sample') {\r\n        return getSampleBillData();\r\n    }\r\n    \r\n    const storageKey = `bill_history_${hotelId}`;\r\n    const bills = localStorage.getItem(storageKey);\r\n    console.log('Retrieved from localStorage with key:', storageKey);\r\n    console.log('Raw data from localStorage:', bills);\r\n    \r\n    const parsedBills = bills ? JSON.parse(bills) : [];\r\n    console.log('Parsed bills:', parsedBills);\r\n    console.log('Number of bills found:', parsedBills.length);\r\n    \r\n    return parsedBills;\r\n};\r\n\r\n// Get bill by ID\r\nexport const getBillById = (billId) => {\r\n    const bills = getBillHistory();\r\n    return bills.find(bill => bill.id === billId);\r\n};\r\n\r\n// Update bill payment information\r\nexport const updateBillPayment = (billId, paymentInfo) => {\r\n    const bills = getBillHistory();\r\n    const updatedBills = bills.map(bill => {\r\n        if (bill.id === billId) {\r\n            return {\r\n                ...bill,\r\n                paymentInfo: {\r\n                    ...bill.paymentInfo,\r\n                    ...paymentInfo\r\n                }\r\n            };\r\n        }\r\n        return bill;\r\n    });\r\n    \r\n    const hotelId = getCurrentHotelId();\r\n    localStorage.setItem(`bill_history_${hotelId}`, JSON.stringify(updatedBills));\r\n    \r\n    return true;\r\n};\r\n\r\n// Delete bill from history\r\nexport const deleteBillFromHistory = (billId) => {\r\n    const bills = getBillHistory();\r\n    const updatedBills = bills.filter(bill => bill.id !== billId);\r\n    \r\n    const hotelId = getCurrentHotelId();\r\n    localStorage.setItem(`bill_history_${hotelId}`, JSON.stringify(updatedBills));\r\n    \r\n    return true;\r\n};\r\n\r\n// Filter bills by date range or search term\r\nexport const filterBills = (searchTerm = '', startDate = '', endDate = '') => {\r\n    const bills = getBillHistory();\r\n    \r\n    return bills.filter(bill => {\r\n        // Ensure searchTerm is a string and handle null/undefined\r\n        const searchStr = String(searchTerm || '').toLowerCase();\r\n        \r\n        const matchesSearch = !searchStr || \r\n            bill.billNumber?.toLowerCase().includes(searchStr) ||\r\n            bill.customerInfo?.name?.toLowerCase().includes(searchStr) ||\r\n            bill.customerInfo?.phoneNumber?.includes(searchTerm);\r\n            \r\n        const matchesDateRange = (!startDate || bill.date >= startDate) &&\r\n            (!endDate || bill.date <= endDate);\r\n            \r\n        return matchesSearch && matchesDateRange;\r\n    });\r\n};\r\n\r\n// Get bill statistics\r\nexport const getBillStatistics = () => {\r\n    const bills = getBillHistory();\r\n    \r\n    const totalBills = bills.length;\r\n    const totalRevenue = bills.reduce((sum, bill) => sum + (bill.total || 0), 0);\r\n    const totalReceived = bills.reduce((sum, bill) => sum + (bill.paymentInfo?.jama || 0), 0);\r\n    const totalPending = bills.reduce((sum, bill) => sum + (bill.paymentInfo?.baki || 0), 0);\r\n    \r\n    // Calculate today's statistics\r\n    const today = new Date().toLocaleDateString();\r\n    const todaysBills = bills.filter(bill => {\r\n        // Check if bill date matches today's date\r\n        const billDate = new Date(bill.date || bill.savedAt).toLocaleDateString();\r\n        return billDate === today;\r\n    });\r\n    \r\n    const todaysBillCount = todaysBills.length;\r\n    const todaysRevenue = todaysBills.reduce((sum, bill) => sum + (bill.total || 0), 0);\r\n    \r\n    return {\r\n        totalBills,\r\n        totalRevenue,\r\n        totalReceived,\r\n        totalPending,\r\n        todaysBills: todaysBillCount,\r\n        todaysRevenue: todaysRevenue,\r\n        averageBillAmount: totalBills > 0 ? totalRevenue / totalBills : 0\r\n    };\r\n};\r\n\r\n// Export single bill to PDF\r\nexport const exportSingleBillToPDF = (bill) => {\r\n    try {\r\n        console.log('Starting PDF export...');\r\n        \r\n        // Show fake save dialog for sample hotel\r\n        const hotelId = getCurrentHotelId();\r\n        if (hotelId === 'sample') {\r\n            // Create a fake file download experience\r\n            const link = document.createElement('a');\r\n            link.download = `sample_bill_${bill.billNumber || 'demo'}.pdf`;\r\n            link.href = 'data:application/pdf;base64,JVBERi0xLjQKJdPr6eEKMSAwIG9iago8PAovVHlwZSAvQ2F0YWxvZwovUGFnZXMgMiAwIFIKPj4KZW5kb2JqCjIgMCBvYmoKPDwKL1R5cGUgL1BhZ2VzCi9LaWRzIFszIDAgUl0KL0NvdW50IDEKL01lZGlhQm94IFswIDAgNTk1IDg0Ml0KPj4KZW5kb2JqCjMgMCBvYmoKPDwKL1R5cGUgL1BhZ2UKL1BhcmVudCAyIDAgUgovUmVzb3VyY2VzIDw8Cj4+Ci9Db250ZW50cyA0IDAgUgo+PgplbmRvYmoKNCAwIG9iago8PAovTGVuZ3RoIDQ0Cj4+CnN0cmVhbQpCVAovRjEgMTIgVGYKNzIgNzIwIFRkCihTYW1wbGUgQmlsbCBQREYpIFRqCkVUCmVuZHN0cmVhbQplbmRvYmoKeHJlZgowIDUKMDAwMDAwMDAwMCA2NTUzNSBmIAowMDAwMDAwMDA5IDAwMDAwIG4gCjAwMDAwMDAwNTggMDAwMDAgbiAKMDAwMDAwMDExNSAwMDAwMCBuIAowMDAwMDAwMTk0IDAwMDAwIG4gCnRyYWlsZXIKPDwKL1NpemUgNQovUm9vdCAxIDAgUgo+PgpzdGFydHhyZWYKMjg5CiUlRU9GCg==';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n            \r\n            console.log('Sample hotel: Fake single bill PDF export completed');\r\n            return true;\r\n        }\r\n        \r\n        // Validate bill data\r\n        if (!bill) {\r\n            throw new Error('No bill data provided');\r\n        }\r\n        \r\n        console.log('Creating jsPDF instance...');\r\n        // Create new PDF document\r\n        const doc = new jsPDF();\r\n        \r\n        console.log('Adding basic text to PDF...');\r\n        // Add very basic content\r\n        doc.text('VK Solutions', 20, 20);\r\n        doc.text('Hotel Management System', 20, 30);\r\n        doc.text(`Bill Number: ${bill.billNumber || 'N/A'}`, 20, 50);\r\n        doc.text(`Date: ${bill.date || 'N/A'}`, 20, 60);\r\n        doc.text(`Total: Rs. ${(bill.total || 0).toFixed(2)}`, 20, 70);\r\n        \r\n        console.log('PDF created successfully');\r\n        return doc;\r\n    } catch (error) {\r\n        console.error('Detailed PDF error:', error);\r\n        console.error('Error stack:', error.stack);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Export bill history to JSON\r\nexport const exportBillHistory = () => {\r\n    const bills = getBillHistory();\r\n    const user = getCurrentUser();\r\n    \r\n    const exportData = {\r\n        hotelName: user?.hotelName,\r\n        exportDate: new Date().toISOString(),\r\n        totalBills: bills.length,\r\n        bills: bills\r\n    };\r\n    \r\n    return JSON.stringify(exportData, null, 2);\r\n};\r\n\r\n// Auto-export function for monthly reports\r\nexport const autoExportMonthlyReport = () => {\r\n    const today = new Date();\r\n    const isFirstDayOfMonth = today.getDate() === 1;\r\n    \r\n    if (isFirstDayOfMonth) {\r\n        // Get previous month's data\r\n        const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);\r\n        const startDate = lastMonth.toISOString().split('T')[0];\r\n        const endDate = new Date(today.getFullYear(), today.getMonth(), 0).toISOString().split('T')[0];\r\n        \r\n        // Filter bills for last month\r\n        const allBills = getBillHistory();\r\n        const monthlyBills = allBills.filter(bill => {\r\n            const billDate = new Date(bill.date.split('/').reverse().join('-'));\r\n            return billDate >= new Date(startDate) && billDate <= new Date(endDate);\r\n        });\r\n        \r\n        if (monthlyBills.length > 0) {\r\n            const doc = generateMonthlyPDF(monthlyBills, lastMonth);\r\n            const monthName = lastMonth.toLocaleString('default', { month: 'long', year: 'numeric' });\r\n            const fileName = `Monthly_Report_${monthName.replace(' ', '_')}.pdf`;\r\n            doc.save(fileName);\r\n            \r\n            console.log(`Auto-exported monthly report: ${fileName}`);\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\n\r\n// Generate PDF for monthly reports\r\nconst generateMonthlyPDF = (bills, month) => {\r\n    const user = getCurrentUser();\r\n    const doc = new jsPDF();\r\n    \r\n    // Header\r\n    doc.setFontSize(16);\r\n    doc.setFont(undefined, 'bold');\r\n    const hotelDisplayName = user?.hotelName === 'हॉटेल मातोश्री' ? 'Hotel Matoshree' : \r\n                           user?.hotelName === 'हॉटेल गुरुकृपा' ? 'Hotel Gurukrupa' : \r\n                           (user?.hotelName || 'Hotel');\r\n    \r\n    const monthYear = month.toLocaleString('default', { month: 'long', year: 'numeric' });\r\n    doc.text(`${hotelDisplayName} - Monthly Report`, 20, 20);\r\n    doc.setFontSize(12);\r\n    doc.text(`Month: ${monthYear}`, 20, 35);\r\n    doc.text(`Generated: ${new Date().toLocaleDateString()}`, 20, 45);\r\n    doc.text(`Total Bills: ${bills.length}`, 20, 55);\r\n    \r\n    // Use the same table format as regular export\r\n    return generateBillTable(doc, bills, 65);\r\n};\r\n\r\n// Export bills to PDF (for backup/download)\r\nexport const exportBillHistoryToPDF = (monthlyFilter = null) => {\r\n    try {\r\n        const hotelId = getCurrentHotelId();\r\n        \r\n        // Show fake save dialog for sample hotel\r\n        if (hotelId === 'sample') {\r\n            // Create a fake file download experience\r\n            const link = document.createElement('a');\r\n            link.download = 'sample_bill_history.pdf';\r\n            link.href = 'data:application/pdf;base64,JVBERi0xLjQKJdPr6eEKMSAwIG9iago8PAovVHlwZSAvQ2F0YWxvZwovUGFnZXMgMiAwIFIKPj4KZW5kb2JqCjIgMCBvYmoKPDwKL1R5cGUgL1BhZ2VzCi9LaWRzIFszIDAgUl0KL0NvdW50IDEKL01lZGlhQm94IFswIDAgNTk1IDg0Ml0KPj4KZW5kb2JqCjMgMCBvYmoKPDwKL1R5cGUgL1BhZ2UKL1BhcmVudCAyIDAgUgovUmVzb3VyY2VzIDw8Cj4+Ci9Db250ZW50cyA0IDAgUgo+PgplbmRvYmoKNCAwIG9iago8PAovTGVuZ3RoIDQ0Cj4+CnN0cmVhbQpCVAovRjEgMTIgVGYKNzIgNzIwIFRkCihTYW1wbGUgUERGKSBUagpFVAplbmRzdHJlYW0KZW5kb2JqCnhyZWYKMCA1CjAwMDAwMDAwMDAgNjU1MzUgZiAKMDAwMDAwMDAwOSAwMDAwMCBuIAowMDAwMDAwMDU4IDAwMDAwIG4gCjAwMDAwMDAxMTUgMDAwMDAgbiAKMDAwMDAwMDE5NCAwMDAwMCBuIAp0cmFpbGVyCjw8Ci9TaXplIDUKL1Jvb3QgMSAwIFIKPj4Kc3RhcnR4cmVmCjI4OQolJUVPRgo=';\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n            \r\n            console.log('Sample hotel: Fake PDF export completed');\r\n            return true;\r\n        }\r\n        \r\n        let bills = getBillHistory();\r\n        const user = getCurrentUser();\r\n        \r\n        // Apply monthly filter if provided\r\n        if (monthlyFilter) {\r\n            const { year, month } = monthlyFilter;\r\n            bills = bills.filter(bill => {\r\n                const billDate = new Date(bill.date.split('/').reverse().join('-'));\r\n                return billDate.getFullYear() === year && billDate.getMonth() === month;\r\n            });\r\n        }\r\n        \r\n        if (bills.length === 0) {\r\n            throw new Error('No bills to export');\r\n        }\r\n        \r\n        // Create new PDF document\r\n        const doc = new jsPDF();\r\n        \r\n        // Add header with better styling - removed VK Solutions as requested\r\n        doc.setFontSize(16);\r\n        doc.setFont(undefined, 'bold');\r\n        \r\n        // Convert hotel name to readable format for PDF\r\n        const hotelDisplayName = user?.hotelName === 'हॉटेल मातोश्री' ? 'Hotel Matoshree' : \r\n                               user?.hotelName === 'हॉटेल गुरुकृपा' ? 'Hotel Gurukrupa' : \r\n                               (user?.hotelName || 'Hotel');\r\n        doc.text(`${hotelDisplayName} - Bill History`, 20, 20);\r\n        \r\n        doc.setFontSize(12);\r\n        doc.setFont(undefined, 'normal');\r\n        doc.text(`Export Date: ${new Date().toLocaleDateString()}`, 20, 35);\r\n        doc.text(`Total Bills: ${bills.length}`, 20, 45);\r\n        \r\n        // Generate the bill table\r\n        generateBillTable(doc, bills, 60);\r\n        \r\n        return doc;\r\n    } catch (error) {\r\n        console.error('Error generating PDF:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n// Helper function to generate bill table\r\nconst generateBillTable = (doc, bills, startYPos) => {\r\n    let yPos = startYPos;\r\n    \r\n    // Add summary table headers - adjusted column positions to fit in page\r\n    doc.setFont(undefined, 'bold');\r\n    doc.setFontSize(9);\r\n    doc.text('Sr.', 15, yPos);\r\n    doc.text('Bill No.', 25, yPos);\r\n    doc.text('Date', 55, yPos);\r\n    doc.text('Customer', 85, yPos);\r\n    doc.text('Type', 120, yPos);\r\n    doc.text('Total', 140, yPos);\r\n    doc.text('Received', 165, yPos);\r\n    doc.text('Balance', 190, yPos);\r\n    yPos += 5;\r\n    \r\n    // Draw line under headers - adjusted width to fit page\r\n    doc.line(15, yPos, 210, yPos);\r\n    yPos += 5;\r\n    \r\n    // Add bills summary in table format\r\n    doc.setFont(undefined, 'normal');\r\n    doc.setFontSize(8);\r\n    \r\n    bills.forEach((bill, index) => {\r\n        // Check if we need a new page\r\n        if (yPos > 270) {\r\n            doc.addPage();\r\n            yPos = 20;\r\n            \r\n            // Repeat headers on new page\r\n            doc.setFont(undefined, 'bold');\r\n            doc.setFontSize(9);\r\n            doc.text('Sr.', 15, yPos);\r\n            doc.text('Bill No.', 25, yPos);\r\n            doc.text('Date', 55, yPos);\r\n            doc.text('Customer', 85, yPos);\r\n            doc.text('Type', 120, yPos);\r\n            doc.text('Total', 140, yPos);\r\n            doc.text('Received', 165, yPos);\r\n            doc.text('Balance', 190, yPos);\r\n            yPos += 5;\r\n            doc.line(15, yPos, 210, yPos);\r\n            yPos += 5;\r\n            doc.setFont(undefined, 'normal');\r\n            doc.setFontSize(8);\r\n        }\r\n        \r\n        const customerName = (bill.customerInfo?.name || 'Walk-in').substring(0, 12);\r\n        const orderType = (bill.customerInfo?.tableNumber && bill.customerInfo.tableNumber !== '-') ? 'Table' : 'Parcel';\r\n        const jama = bill.paymentInfo?.jama || 0;\r\n        const baki = bill.paymentInfo?.baki || bill.total || 0;\r\n        \r\n        doc.text((index + 1).toString(), 15, yPos);\r\n        doc.text(bill.billNumber, 25, yPos);\r\n        doc.text(bill.date, 55, yPos);\r\n        doc.text(customerName, 85, yPos);\r\n        doc.text(orderType, 120, yPos);\r\n        doc.text(`${(bill.total || 0).toFixed(0)}`, 140, yPos);\r\n        doc.text(`${jama.toFixed(0)}`, 165, yPos);\r\n        doc.text(`${baki.toFixed(0)}`, 190, yPos);\r\n        yPos += 5;\r\n    });\r\n    \r\n    // Add totals at the end\r\n    yPos += 3;\r\n    doc.line(140, yPos, 210, yPos);\r\n    yPos += 5;\r\n    \r\n    const totalAmount = bills.reduce((sum, bill) => sum + (bill.total || 0), 0);\r\n    const totalJama = bills.reduce((sum, bill) => sum + (bill.paymentInfo?.jama || 0), 0);\r\n    const totalBaki = bills.reduce((sum, bill) => sum + (bill.paymentInfo?.baki || bill.total || 0), 0);\r\n    \r\n    doc.setFont(undefined, 'bold');\r\n    doc.setFontSize(9);\r\n    doc.text('TOTALS:', 110, yPos);\r\n    doc.text(`Rs.${totalAmount.toFixed(0)}`, 140, yPos);\r\n    doc.text(`Rs.${totalJama.toFixed(0)}`, 165, yPos);\r\n    doc.text(`Rs.${totalBaki.toFixed(0)}`, 190, yPos);\r\n    \r\n    return doc;\r\n};\r\n\r\n// Print single bill (for browser print)\r\nexport const printSingleBill = (bill) => {\r\n    const user = getCurrentUser();\r\n    \r\n    // Create a new window for printing\r\n    const printWindow = window.open('', '_blank');\r\n    \r\n    const printContent = `\r\n    <!DOCTYPE html>\r\n    <html>\r\n    <head>\r\n        <title>Bill - ${bill.billNumber}</title>\r\n        <style>\r\n            body { font-family: Arial, sans-serif; margin: 20px; }\r\n            .header { text-align: center; margin-bottom: 20px; }\r\n            .bill-info { margin-bottom: 20px; }\r\n            .items-table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }\r\n            .items-table th, .items-table td { border: 1px solid #ddd; padding: 8px; text-align: left; }\r\n            .items-table th { background-color: #f2f2f2; }\r\n            .total-section { text-align: right; margin-top: 20px; }\r\n            .footer { margin-top: 30px; text-align: center; font-size: 12px; color: #666; }\r\n        </style>\r\n    </head>\r\n    <body>\r\n        <div class=\"header\">\r\n            <h2>${user?.hotelName || 'Hotel'}</h2>\r\n            <h3>Bill Receipt - ${bill.billNumber}</h3>\r\n        </div>\r\n        \r\n        <div class=\"bill-info\">\r\n            <p><strong>Date:</strong> ${bill.date}</p>\r\n            <p><strong>Time:</strong> ${bill.time}</p>\r\n            ${bill.customerInfo?.name ? `<p><strong>Customer:</strong> ${bill.customerInfo.name}</p>` : ''}\r\n        </div>\r\n        \r\n        <table class=\"items-table\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Item</th>\r\n                    <th>Rate</th>\r\n                    <th>Quantity</th>\r\n                    <th>Amount</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                ${bill.items.map(item => `\r\n                    <tr>\r\n                        <td>${item.name}</td>\r\n                        <td>₹${item.rate}</td>\r\n                        <td>${item.quantity}</td>\r\n                        <td>₹${(item.rate * item.quantity).toFixed(2)}</td>\r\n                    </tr>\r\n                `).join('')}\r\n            </tbody>\r\n        </table>\r\n        \r\n        <div class=\"total-section\">\r\n            <p><strong>Subtotal: ₹${(bill.subtotal || 0).toFixed(2)}</strong></p>\r\n            <p><strong>Tax: ₹${(bill.tax || 0).toFixed(2)}</strong></p>\r\n            <p><strong>Total: ₹${(bill.total || 0).toFixed(2)}</strong></p>\r\n            ${bill.paymentInfo ? `\r\n                <p>Received (Jama): ₹${(bill.paymentInfo.jama || 0).toFixed(2)}</p>\r\n                <p>Balance (Baki): ₹${(bill.paymentInfo.baki || 0).toFixed(2)}</p>\r\n            ` : ''}\r\n        </div>\r\n        \r\n        <div class=\"footer\">\r\n            <p>Thank you for visiting ${user?.hotelName || 'our hotel'}!</p>\r\n            <p>Powered by VK Solutions Hotel Management System</p>\r\n        </div>\r\n    </body>\r\n    </html>\r\n    `;\r\n    \r\n    printWindow.document.write(printContent);\r\n    printWindow.document.close();\r\n    printWindow.print();\r\n};"],"names":["getBillHistory","hotelId","getCurrentHotelId","console","log","id","billNumber","date","time","customerInfo","name","tableNumber","phoneNumber","items","code","rate","quantity","subtotal","tax","total","paymentInfo","jama","baki","hotelName","savedAt","savedBy","storageKey","concat","bills","localStorage","getItem","parsedBills","JSON","parse","length","autoExportMonthlyReport","today","Date","getDate","lastMonth","getFullYear","getMonth","startDate","toISOString","split","endDate","monthlyBills","filter","bill","billDate","reverse","join","doc","generateMonthlyPDF","monthName","toLocaleString","month","year","fileName","replace","save","user","getCurrentUser","jsPDF","setFontSize","setFont","undefined","hotelDisplayName","monthYear","text","toLocaleDateString","generateBillTable","startYPos","yPos","line","forEach","index","_bill$customerInfo3","_bill$customerInfo4","_bill$paymentInfo3","_bill$paymentInfo4","addPage","customerName","substring","orderType","toString","toFixed","totalAmount","reduce","sum","totalJama","_bill$paymentInfo5","totalBaki","_bill$paymentInfo6"],"sourceRoot":""}